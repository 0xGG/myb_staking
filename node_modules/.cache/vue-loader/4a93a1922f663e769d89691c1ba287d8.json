{"remainingRequest":"/usr/local/var/www/appco-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/local/var/www/appco-vue/src/views/index-four/Pricing.vue?vue&type=template&id=f311171c&","dependencies":[{"path":"/usr/local/var/www/appco-vue/src/views/index-four/Pricing.vue","mtime":1604401787000},{"path":"/usr/local/var/www/appco-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/appco-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/usr/local/var/www/appco-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/appco-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}