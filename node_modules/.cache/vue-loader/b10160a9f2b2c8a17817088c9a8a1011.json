{"remainingRequest":"/usr/local/var/www/appco-vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/var/www/appco-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/usr/local/var/www/appco-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/local/var/www/appco-vue/src/views/index-five/Features.vue?vue&type=template&id=26815096&","dependencies":[{"path":"/usr/local/var/www/appco-vue/src/views/index-five/Features.vue","mtime":1604401787000},{"path":"/usr/local/var/www/appco-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/appco-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/usr/local/var/www/appco-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/appco-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}